@merge module Stripe {
    func getCheckoutSessions(key: String, verbose: Bool): Possible[Array[SrdRef[CheckoutSession]]] {
        def checkOutArray: Array[SrdRef[CheckoutSession]];
        def request: Net.Request(String("https://api.stripe.com/v1/checkout/sessions"), key, String("Bearer"));
        request.verbose = verbose;
        request.get();
        if request.responseHttpStatus == 401 {
            return Possible[Array[SrdRef[CheckoutSession]]].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 0 {
            return Possible[Array[SrdRef[CheckoutSession]]].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[Array[SrdRef[CheckoutSession]]].failure(Errors.unexpected());
        }
        def checkoutSessionObject: Json = request.responseBody;
        def i: int = 0;
        if checkoutSessionObject.getString("object") != String("list") {
            checkOutArray.add(convertToCheckoutSession(checkoutSessionObject));
        } else {
            for i = 0, i < checkoutSessionObject.getObject("data").getLength(), i += 1 {
                checkOutArray.add(convertToCheckoutSession(checkoutSessionObject.getObject("data").getObject(i)));
            }
            while checkoutSessionObject.getString("has_more") == String("true") {
                request = SrdRef[Net.Request]().{
                    alloc()~init(String.format("https://api.stripe.com/v1/checkout/sessions?starting_after=%s", checkOutArray(checkOutArray.getLength() - 1).id.buf), key, String("Bearer"));
                }
                request.verbose = verbose;
                request.get();
                if request.responseHttpStatus == 401 {
                    return Possible[Array[SrdRef[Customer]]].failure(Errors.unauthenticated());
                } else if request.responseHttpStatus == 0 {
                    return Possible[Array[SrdRef[Customer]]].failure(Errors.connection());
                } else if request.responseHttpStatus != 200 {
                    return Possible[Array[SrdRef[Customer]]].failure(Errors.unexpected());
                }
                checkoutSessionObject = request.responseBody;

                for i = 0, i < checkoutSessionObject.getObject("data").getLength(), i += 1 {
                    checkOutArray.add(createCheckoutSession(checkoutSessionObject.getObject("data").getObject(i)));
                }
            }
        }
        return Possible[Array[SrdRef[CheckoutSession]]].success(checkOutArray);
    }

    func getCheckoutSession(key: String, checkoutId: String, verbose: Bool): Possible[SrdRef[CheckoutSession]] {
        def request: Net.Request(String.format("https://api.stripe.com/v1/checkout/sessions/%s", checkoutId.buf), key, String("Bearer"));
        request.verbose = verbose;
        request.get();
        if request.responseHttpStatus == 401 {
            return Possible[SrdRef[CheckoutSession]].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 404 {
            return Possible[SrdRef[CheckoutSession]].failure(Errors.notFound());
        } else if request.responseHttpStatus == 0 {
            return Possible[SrdRef[CheckoutSession]].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[SrdRef[CheckoutSession]].failure(Errors.unexpected());
        }
        def checkoutSessionObject: Json = request.responseBody;
        return Possible[SrdRef[CheckoutSession]].success(convertToCheckoutSession(checkoutSessionObject));
    }
    func convertToCheckoutSession(checkoutSessionObject: Json): SrdRef[CheckoutSession] {
        def checkout: SrdRef[CheckoutSession];
        checkoutSession = SrdRef[CheckoutSession]().{
        alloc()~init(checkoutSessionObject.getString("id"),
            checkoutSessionObject.getString("client_reference_id"),
            checkoutSessionObject.getString("cancel_url"),
            checkoutSessionObject.getString("success_url"),
            checkoutSessionObject.getString("url"),
            checkoutSessionObject.getString("currency"),
            checkoutSessionObject.getString("customer"),
            checkoutSessionObject.getString("line_items"),
            checkoutSessionObject.getString("mode"),
            checkoutSessionObject.getString("payment_status"),
            checkoutSessionObject.getString("status"),
            checkoutSessionObject.getString("amount_total"))
        }
        return checkoutSession;
    }

    func createCheckoutSession(key: String, parameters: String, verbose: Bool): Possible[String] {
        def checkOutSessionId: String;
        def request: Net.Request(
            String("https://api.stripe.com/v1/checkout/sessions"),
            key, String("Bearer"),
            String("application/x-www-form-urlencoded")
        );
        request.verbose = verbose;
        request.post(parameters.buf);
        if request.responseHttpStatus == 401 {
            return Possible[String].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 400 {
            return Possible[String].failure(Errors.invalidParams());
        } else if request.responseHttpStatus == 0 {
            return Possible[String].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[String].failure(Errors.unexpected());
        }
        def checkOutSessionObject: Json = request.responseBody;
        checkOutSessionId = checkOutSessionObject.getString("id");
        return Possible[String].success(checkOutSessionId);
    }

    func createCheckoutSession(
        key: String, items: Map[String, Int], customerId: String, successUrl: CharsPtr, verbose: Bool
    ): Possible[String] {
        if items.getLength() == 0 {
            return Possible[String].failure(Errors.invalidParams());
        }
        def parameters: String;
        if customerId != String() {
            parameters = String.format(
                "mode=payment&customer=%s&success_url=%s"، customerId.buf, Net.uriEncode(successUrl).buf
            );
        } else {
            parameters = String.format("mode=payment&success_url=%s", Net.uriEncode(successUrl).buf);
        }
        def i: Int;
        for i = 0, i < items.getLength(), ++i {
            parameters += String.format(
                "&line_items[%i][price]=%s&line_items[%i][quantity]=%i"،
                i, Net.uriEncode(items.keyAt(i)).buf, i, items.valAt(i)
            );
        }
        return createCheckoutSession(key, parameters, verbose);
    }
}
