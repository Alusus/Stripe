@merge module Stripe {
    func getCheckoutSessions(key: String, verbose: Bool): Array[SrdRef[CheckoutSession]] {
        def checkOutArray: Array[SrdRef[CheckoutSession]];
        def request: Net.Request(String("https://api.stripe.com/v1/checkout/sessions"), key, String("Bearer"));
        request.verbose = verbose;
        request.get();
        def checkoutObject: Json = request.responseBody.buf;
        def i: int = 0;
        def j: int = 0;
        def checkout: SrdRef[CheckoutSession];
        for i = 0, i < checkoutObject.getObject("data").getLength(), i += 1 {
            checkout = SrdRef[CheckoutSession]().{
                alloc()~init(checkoutObject.getObject("data")
                    .getObject(i).getString("id"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("client_reference_id"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("cancel_url"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("success_url"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("url"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("currency"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("customer"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("line_items"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("mode"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("payment_status"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("status"),
                    checkoutObject.getObject("data")
                    .getObject(i).getString("amount_total"))
            }
            checkOutArray.add(checkout);
        }

        return checkOutArray;
    }

    func getCheckoutSession(key: String, checkoutId: String, verbose: Bool): SrdRef[CheckoutSession] {
        def request: Net.Request(String.format("https://api.stripe.com/v1/checkout/sessions/%s", checkoutId.buf), key, String("Bearer"));
        request.verbose = verbose;
        request.get();
        def checkoutObject: Json = request.responseBody.buf;
        def checkout: SrdRef[CheckoutSession];
        checkout = SrdRef[CheckoutSession]().{
            alloc()~init(checkoutObject.getString("id"),
                checkoutObject.getString("client_reference_id"),
                checkoutObject.getString("cancel_url"),
                checkoutObjec.getString("success_url"),
                checkoutObject.getString("url"),
                checkoutObject.getString("currency"),
                checkoutObject.getString("customer"),
                checkoutObject.getString("line_items"),
                checkoutObject.getString("mode"),
                checkoutObject.getString("payment_status"),
                checkoutObject.getString("status"),
                checkoutObject.getString("amount_total"))
        }
        return checkout;
    }

    func createCheckoutSession(key: String, parameters: String, verbose: Bool): String {
        def checkOutSessionId: String;
        def request: Net.Request(
            String("https://api.stripe.com/v1/checkout/sessions"),
            key, String("Bearer"),
            String("application/x-www-form-urlencoded")
        );
        request.verbose = verbose;
        request.post(parameters.buf);
        def checkOutSessionObject: Json = request.responseBody.buf;
        checkOutSessionId = checkOutSessionObject.getString("id");
        return checkOutSessionId;
    }
}

