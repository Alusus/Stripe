@merge module Stripe {
    func getCustomers(key: String, limit: int, startId: String, verbose: Bool): Possible[Array[SrdRef[Customer]]] {
        return getRecords[Customer, convertToCustomer](
            key, String("https://api.stripe.com/v1/customers"), limit, startId, verbose
        );
    }

    func getCustomer(key: String, customerId: String, verbose: Bool): Possible[SrdRef[Customer]] {
        return getRecord[Customer, convertToCustomer](
            key, "https://api.stripe.com/v1/customers", customerId, verbose
        );
    }

    func convertToCustomer(customerJson: Json): SrdRef[Customer] {
        def i: int = 0;
        def prfLoc: Array[String];
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];

        for i = 0, i < customerJson("preferred_locales").getLength(), i++ {
            prfLoc.add(customerJson("data")(i)("preferred_locales")(i));
        }
        if not customerJson("address").isNull() {
            address = SrdRef[Address]().{
                alloc()~init(
                    customerJson("address")("city"),
                    customerJson("address")("country"),
                    customerJson("address")("line1"),
                    customerJson("address")("line2"),
                    customerJson("address")("postalCode"),
                    customerJson("address")("state")
                );
            };
        } else
            address = SrdRef[Address](). {
            alloc()~init()
        };
        customer = SrdRef[Customer]().{
            alloc()~init(
                customerJson("id"),
                address,
                customerJson("balance"),
                customerJson("created"),
                customerJson("currency"),
                customerJson("default_source"),
                customerJson("delinquent"),
                customerJson("description"),
                customerJson("email"),
                customerJson("invoice_prefix"),
                customerJson("name"),
                customerJson("nextInvoiceSequence"),
                customerJson("phone"),
                prfLoc,
                customerJson("shipping"),
                customerJson("tax_exempt"),
                customerJson("test_clock"),
                customerJson("invoice_settings")("default_payment_method")
            );
        }
        return customer
    }

    func createCustomer(key: String, parameters: String, verbose: Bool): Possible[String] {
        return postRecord(key, String("https://api.stripe.com/v1/customers"), parameters, verbose);
    }

    func doesCustomerHaveDefaultPaymentMethod(key: String, customerId: String, verbose: Bool): Bool {
        def customer: Possible[SrdRef[Customer]] = getCustomer(key, customerId, verbose);
        if customer and customer.defaultPaymentMethod != ""
            return true;
        return false;
    }

    func addCustomerDefaultPaymentMethod(
        key: String, customerId: String, paymentMethodId: String, verbose: Bool
    ): SrdRef[Error] {
        def parameters: String = String("invoice_settings[default_payment_method]=") + paymentMethodId;
        def res: Possible[String] = postRecord(
            key,
            String.format("https://api.stripe.com/v1/customers/%s", customerId.buf),
            parameters,
            verbose
        );
        if not res return res.error
        else return SrdRef[Error]();
    }
}
