@merge module Stripe {
    func getCustomers(key: String, verbose: Bool): Possible[Array[SrdRef[Customer]]] {
        def customerArray: Array[SrdRef[Customer]];
        def prfLoc: Array[String];
        def request: Net.Request(String("https://api.stripe.com/v1/customers"), key, String("Bearer"));
        request.verbose = verbose;
        request.get();
        if request.responseHttpStatus == 401 {
            return Possible[Array[SrdRef[Customer]]].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 0 {
            return Possible[Array[SrdRef[Customer]]].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[Array[SrdRef[Customer]]].failure(Errors.unexpected());
        }
        def customerObject: Json = request.responseBody;
        def i: int = 0;
        def j: int = 0;
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];
        for i = 0, i < customerObject("data").getLength(), i += 1 {
            for j = 0, j < customerObject("data")(i)("preferred_locales").getLength(), j++ {
                prfLoc.add(customerObject("data")(i)("preferred_locales")(j));
            }
            if not customerObject("data")(i)("address").isNull() {
                address = SrdRef[Address]().{
                    alloc()~init(
                        customerObject("data")(i)("address")("city"),
                        customerObject("data")(i)("address")("country"),
                        customerObject("data")(i)("address")("line1"),
                        customerObject("data")(i)("address")("line2"),
                        customerObject("data")(i)("address")("postalCode"),
                        customerObject("data")(i)("address")("state")
                    )
                };
            } else
                address = SrdRef[Address](). {
                alloc()~init()
            };
            customer = SrdRef[Customer]().{
                alloc()~init(
                    customerObject("data")(i)("id"),
                    address,
                    customerObject("data")(i)("balance"),
                    customerObject("data")(i)("created"),
                    customerObject("data")(i)("currency"),
                    customerObject("data")(i)("default_source"),
                    customerObject("data")(i)("delinquent"),
                    customerObject("data")(i)("description"),
                    customerObject("data")(i)("email"),
                    customerObject("data")(i)("invoice_prefix"),
                    customerObject("data")(i)("name"),
                    customerObject("data")(i)("nextInvoiceSequence"),
                    customerObject("data")(i)("phone"),
                    prfLoc,
                    customerObject("data")(i)("shipping"),
                    customerObject("data")(i)("tax_exempt"),
                    customerObject("data")(i)("test_clock")
                )
            }
            customerArray.add(customer);
            prfLoc.clear();
        }
        return Possible[Array[SrdRef[Customer]]].success(customerArray);
    }

    func getCustomer(key: String, customerId: String, verbose: Bool): Possible[SrdRef[Customer]] {
        def prfLoc: Array[String];
        def request: Net.Request(
            String.format("https://api.stripe.com/v1/customers/%s", customerId), key, String("Bearer")
        );
        request.verbose = verbose;
        request.get();
        if request.responseHttpStatus == 401 {
            return Possible[SrdRef[Customer]].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 404 {
            return Possible[SrdRef[Customer]].failure(Errors.notFound());
        } else if request.responseHttpStatus == 0 {
            return Possible[SrdRef[Customer]].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[SrdRef[Customer]].failure(Errors.unexpected());
        }
        def customerObject: Json = request.responseBody;
        def i: int = 0;
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];

        for i = 0, i < customerObject("preferred_locales").getLength(), i++ {
            prfLoc.add(customerObject("data")(i)("preferred_locales")(i));
        }
        if not customerObject("address").isNull() {
            address = SrdRef[Address]().{
                alloc()~init(
                    customerObject("address")("city"),
                    customerObject("address")("country"),
                    customerObject("address")("line1"),
                    customerObject("address")("line2"),
                    customerObject("address")("postalCode"),
                    customerObject("address")("state")
                );
            };
        } else
            address = SrdRef[Address](). {
            alloc()~init()
        };
        customer = SrdRef[Customer]().{
            alloc()~init(
                customerObject("id"),
                address,
                customerObject("balance"),
                customerObject("created"),
                customerObject("currency"),
                customerObject("default_source"),
                customerObject("delinquent"),
                customerObject("description"),
                customerObject("email"),
                customerObject("invoice_prefix"),
                customerObject("name"),
                customerObject("nextInvoiceSequence"),
                customerObject("phone"),
                prfLoc,
                customerObject("shipping"),
                customerObject("tax_exempt"),
                customerObject("test_clock")
            );
        }
        return Possible[SrdRef[Customer]].success(customer);
    }

    func createCustomer(key: String, parameters: String, verbose: Bool): Possible[String] {
        def b: Bool = true;
        def request: Net.Request(
            String("https://api.stripe.com/v1/customers"),
            key,
            String("Bearer"),
            String("application/x-www-form-urlencoded")
        );
        request.verbose = verbose;
        request.post(parameters.buf);
        if request.responseHttpStatus == 401 {
            return Possible[String].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 400 {
            return Possible[String].failure(Errors.invalidParams());
        } else if request.responseHttpStatus == 0 {
            return Possible[String].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[String].failure(Errors.unexpected());
        }
        def customerObject: Json = request.responseBody;
        return Possible[String].success(customerObject("id"));
    }
}
