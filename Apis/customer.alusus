@merge module Stripe {
    func getCustomers(key: String, verbose: Bool): Possible[Array[SrdRef[Customer]]] {
        def customerArray: Array[SrdRef[Customer]];

        def request: SrdRef[Net.Request]
            request = SrdRef[Net.Request]().{
            alloc()~init(String("https://api.stripe.com/v1/customers"), key, String("Bearer"));
        }
        request.verbose = verbose;
        request.get();
        if request.responseHttpStatus == 401 {
            return Possible[Array[SrdRef[Customer]]].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 0 {
            return Possible[Array[SrdRef[Customer]]].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[Array[SrdRef[Customer]]].failure(Errors.unexpected());
        }
        def customerObject: Json = request.responseBody;

        def i: int = 0;
        def j: int = 0;
        def loc: String;
        def prfLoc: Array[String];
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];
        def delinquent: bool;
        if customerObject.getString("object") != String("list") {
            customerArray.add(convertToCustomer(customerObject));
        } else {
            for i = 0, i < customerObject.getObject("data").getLength(), i += 1 {
                customerArray.add(convertToCustomer(customerObject.getObject("data").getObject(i)));
            }
            while customerObject.getString("has_more") == String("true") {
                request = SrdRef[Net.Request]().{
                    alloc()~init(String.format("https://api.stripe.com/v1/customers?starting_after=%s", customerArray(customerArray.getLength() - 1).id.buf), key, String("Bearer"));
                }
                request.verbose = verbose;
                request.get();
                if request.responseHttpStatus == 401 {
                    return Possible[Array[SrdRef[Customer]]].failure(Errors.unauthenticated());
                } else if request.responseHttpStatus == 0 {
                    return Possible[Array[SrdRef[Customer]]].failure(Errors.connection());
                } else if request.responseHttpStatus != 200 {
                    return Possible[Array[SrdRef[Customer]]].failure(Errors.unexpected());
                }
                customerObject = request.responseBody;

                for i = 0, i < customerObject.getObject("data").getLength(), i += 1 {
                    customerArray.add(convertToCustomer(customerObject.getObject("data").getObject(i)));
                }
            }
        }
        return Possible[Array[SrdRef[Customer]]].success(customerArray);
    }

    func getCustomer(key: String, customerId: String, verbose: Bool): Possible[SrdRef[Customer]] {
        def loc: String;
        def prfLoc: Array[String];
        def request: Net.Request(
            String.format("https://api.stripe.com/v1/customers/%s", customerId.buf), key, String("Bearer")
        );
        request.verbose = verbose;
        request.get();
        if request.responseHttpStatus == 401 {
            return Possible[SrdRef[Customer]].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 404 {
            return Possible[SrdRef[Customer]].failure(Errors.notFound());
        } else if request.responseHttpStatus == 0 {
            return Possible[SrdRef[Customer]].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[SrdRef[Customer]].failure(Errors.unexpected());
        }
        def customerObject: Json = request.responseBody;
        return Possible[SrdRef[Customer]].success(convertToCustomer(customerObject));
    }

    func createCustomer(key: String, parameters: String, verbose: Bool): Possible[String] {
        def b: bool = true;
        def customerId: String;
        def request: Net.Request(
            String("https://api.stripe.com/v1/customers"),
            key,
            String("Bearer"),
            String("application/x-www-form-urlencoded")
        );
        request.verbose = verbose;
        request.post(parameters.buf);
        if request.responseHttpStatus == 401 {
            return Possible[String].failure(Errors.unauthenticated());
        } else if request.responseHttpStatus == 400 {
            return Possible[String].failure(Errors.invalidParams());
        } else if request.responseHttpStatus == 0 {
            return Possible[String].failure(Errors.connection());
        } else if request.responseHttpStatus != 200 {
            return Possible[String].failure(Errors.unexpected());
        }
        def customerObject: Json = request.responseBody;
        customerId = customerObject.getString("id");
        return Possible[String].success(customerId);
    }

    func convertToCustomer(customerObject: Json): SrdRef[Customer] {
        def loc: String;
        def prfLoc: Array[String];
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];
        def delinquent: bool;
        def i: int = 0;

        for i = 0, i < customerObject.getObject("preferred_locales").getLength(), i++ {
            loc = customerObject.getObject("data")
                .getObject(i).getObject("preferred_locales").getString(i)
                prfLoc.add(loc);
        }
        if customerObject.getString("address") != String("null") {
            address = SrdRef[Address]().{
                alloc()~init(
                    customerObject.getObject("address").getString("city"),
                    customerObject.getObject("address").getString("country"),
                    customerObject.getObject("address").getString("line1"),
                    customerObject.getObject("address").getString("line2"),
                    customerObject.getObject("address").getString("postalCode"),
                    customerObject.getObject("address").getString("state")
                )
            };
        } else
            address = SrdRef[Address](). {
            alloc()~init()
        };
        if customerObject.getString("delinquent") == String("true") {
            delinquent = true;
        } else
            delinquent = false;
        customer = SrdRef[Customer]().{
            alloc()~init(customerObject.getString("id"),
                address,
                String.parseFloat(customerObject.getString("balance")),
                String.parseInt(customerObject.getString("created")),
                customerObject.getString("currency"),
                customerObject.getString("default_source"),
                delinquent,
                customerObject.getString("description"),
                customerObject.getString("email"),
                customerObject.getString("invoice_prefix"),
                customerObject.getString("name"),
                String.parseInt(customerObject.getString("nextInvoiceSequence")),
                customerObject.getString("phone"),
                prfLoc,
                customerObject.getString("shipping"),
                customerObject.getString("tax_exempt"),
                customerObject.getString("test_clock"),
                customerObject.getObject("invoice_settings").getString("default_payment_method"))
        }

        return customer;
    }

    func customerHasDefaultPaymentMethod(key: String, customerId: String, verbose: Bool): bool {
        def customer: SrdRef[Customer]
            customer = getCustomer(key, customerId, verbose);
        if customer.defaultPaymentMethod != String("null")
            return true;
        return false;
    }

    func customerAddDefaultPaymentMethod(key: String, customerId: String, paymentMethodId: String, verbose: Bool): bool {
        def parameters: String = "invoice_settings[default_payment_method]=";
        parameters = parameters + paymentID;
        def b: bool = true;
        def customerId: String;
        def request: Net.Request(
            String.format("https://api.stripe.com/v1/customers/%s", customerId.buf),
            key,
            String("Bearer"),
            String("application/x-www-form-urlencoded")
        );
        request.verbose = verbose;
        request.post(parameters.buf);
        if request.responseHttpStatus == 401 {
            return false;
        } else if request.responseHttpStatus == 400 {
            return false;
        } else if request.responseHttpStatus == 0 {
            return false;
        } else if request.responseHttpStatus != 200 {
            return false;
        }
        return true;
    }
}

