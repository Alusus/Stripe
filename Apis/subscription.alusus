@merge module Stripe {
    func getSubscriptions(key: String, verbose: Bool): Possible[Array[SrdRef[Subscription]]] {
        return getRecords[Subscription, convertToSubscription](
            key, String("https://api.stripe.com/v1/subscriptions"), -1, String(), verbose
        );
    }
    
    func getSubscriptions(key: String, searchString: String, verbose: Bool): Possible[Array[SrdRef[Subscription]]] {
        def subscriptions: Array[SrdRef[Subscription]];
        def page: String;
        while 1 {
            def searchUrl: String = "https://api.stripe.com/v1/subscriptions/search";
            if page != "" searchUrl += String("?page=") + page
            else searchUrl += String("?query=") + Net.uriEncode(searchString);
            def request: Net.Request(searchUrl, key, String("Bearer"));
            request.verbose = verbose;
            request.get();
            if request.responseHttpStatus == 401 {
                return Possible[Array[SrdRef[Subscription]]].failure(Errors.unauthenticated());
            } else if request.responseHttpStatus == 404 {
                return Possible[Array[SrdRef[Subscription]]].failure(Errors.notFound());
            } else if request.responseHttpStatus == 0 {
                return Possible[Array[SrdRef[Subscription]]].failure(Errors.connection());
            } else if request.responseHttpStatus != 200 {
                return Possible[Array[SrdRef[Subscription]]].failure(Errors.unexpected());
            }
            def subscriptionsJson: Json = request.responseBody;
            if subscriptionsJson("object")~cast[String] == "search_result" {
                def i: Int;
                for i = 0, i < subscriptionsJson("data").getLength(), i += 1 {
                    subscriptions.add(convertToSubscription(subscriptionsJson("data")(i)));
                }
                if not subscriptionsJson("has_more") break;
                page = subscriptionsJson("next_page");
            } else {
                subscriptions.add(convertToSubscription(subscriptionsJson));
                break;
            }
        }
        return Possible[Array[SrdRef[Subscription]]].success(subscriptions);
    }

    func getSubscription(key: String, subscriptionId: String, verbose: Bool): Possible[SrdRef[Subscription]] {
        return getRecord[Subscription, convertToSubscription](
            key, "https://api.stripe.com/v1/subscriptions", subscriptionId, verbose
        );
    }

    func createSubscription(key: String, parameters: String, verbose: Bool): Possible[String] {
        return postRecord(key, String("https://api.stripe.com/v1/subscriptions"), parameters, verbose);
    }

    func createSubscription(
        key: String, items: Map[String, Int], customerId: String, verbose: Bool
    ): Possible[String] {
        if items.getLength() == 0 {
            return Possible[String].failure(Errors.invalidParams());
        }
        def parameters: String = String.format("customer=%s", customerId.buf);
        def i: Int;
        for i = 0, i < items.getLength(), ++i {
            parameters += String.format(
                "&line_items[%i][price]=%s&line_items[%i][quantity]=%i"ØŒ
                i, Net.uriEncode(items.keyAt(i)).buf, i, items.valAt(i)
            );
        }
        return createSubscription(key, parameters, verbose);
    }

    func convertToSubscription(subscriptionJson: Json): SrdRef[Subscription] {
        def metadata: Map[String, String];
        def i: Int;
        for i = 0, i < subscriptionJson("metadata").getLength(), ++i {
            metadata(subscriptionJson("metadata").getKey(i)) = subscriptionJson("metadata")(i);
        }
        return SrdRef[Subscription]().{
            alloc()~init(
                subscriptionJson("id"),
                subscriptionJson("automatic_tax")("enabled"),
                subscriptionJson("billing_cycle_anchor"),
                subscriptionJson("created"),
                subscriptionJson("collection_method"),
                subscriptionJson("start_date"),
                subscriptionJson("cancel_at_period_end"),
                subscriptionJson("current_period_end"),
                subscriptionJson("current_period_start"),
                subscriptionJson("description"),
                subscriptionJson("status"),
                subscriptionJson("trial_end"),
                subscriptionJson("customer"),
                subscriptionJson("currency"),
                metadata
            )
        };
    }

    func updateSubscription(key: String, subscriptionId: String, parameters: String, verbose: Bool): Possible[String] {
        return postRecord(
            key,
            String.format("https://api.stripe.com/v1/subscriptions/%s", subscriptionId.buf),
            parameters,
            verbose
        );
    }

    func cancelSubscription(key: String, subscriptionId: String, verbose: Bool): SrdRef[Error] {
        return deleteRecord[Subscription, convertToSubscription](
            key, "https://api.stripe.com/v1/subscriptions", subscriptionId, verbose
        );
    }
}
