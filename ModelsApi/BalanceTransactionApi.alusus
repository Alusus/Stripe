@merge module Stripe {
    func getBalanceTranasactions(key: String): Array[SrdRef[BalanceTransaction]] {
        def balanceTransactionArray: Array[SrdRef[BalanceTransaction]];
        def networkObject: Net.Request(String("https:/api.stripe.com/v1/balance_transactions"), key, String("Bearer"));
        networkObject.get();
        def balanceObject: Json = networkObject.responseBody.buf;
        def i: int = 0;
        def j: int = 0;
        def balanceTransaction: SrdRef[BalanceTransaction];
        def feeDetails: Array[String];
        def feeDetail: String = "";
        for i = 0, i < balanceObject.getObject("data").getLength(), i += 1 {
            for j = 0, j < balanceObject.getObject("data").getObject(i).getObject("fee_details").getLength(), j++ {
                feeDetail = balanceObject.getObject("data").getObject(i).getObject("fee_details").getString(i);
                feeDetails.add(feeDetail);
            }
            balanceTransaction = SrdRef[BalanceTransaction](). {
                alloc()~init(balanceObject.getObject("data").getObject(i).getString("id"),
                    stringToFloat(balanceObject.getObject("data")
                    .getObject(i).getString("amount")),
                    stringToInt(balanceObject.getObject("data")
                    .getObject(i).getString("available_on")),
                    stringToInt(balanceObject.getObject("data")
                    .getObject(i).getString("created")),
                    balanceObject.getObject("data").getObject(i).getString("currency"),
                    balanceObject.getObject("data").getObject(i).getString("description"),
                    stringToFloat(balanceObject.getObject("data").getObject(i).getString("exchange_rate")),
                    stringToFloat(balanceObject.getObject("data").getObject(i).getString("fee")),
                    feeDetails,
                    stringToFloat(balanceObject.getObject("data").getObject(i).getString("net")),
                    balanceObject.getObject("data").getObject(i).getString("reporting_category"),
                    balanceObject.getObject("data").getObject(i).getString("source"),
                    balanceObject.getObject("data").getObject(i).getString("status"),
                    balanceObject.getObject("data").getObject(i).getString("type"),)
            }
            balanceTransactionArray.add(balanceTransaction);
            feeDetails.clear();
        }


        return balanceTransactionArray;
    }

    func getBalanceTranasaction(key: String, id: String): SrdRef[BalanceTransaction] {
        def networkObject: Net.Request(String("https:/api.stripe.com/v1/balance_transactions"), key, String("Bearer"));
        networkObject.get();
        def balanceObject: Json = networkObject.responseBody.buf;
        def i: int = 0;
        def feeDetails: Array[String];
        def feeDetail: String = "";

        for i = 0, i < balanceObject.getObject("fee_details").getLength(), i++ {
            feeDetail = balanceObject.getObject("fee_details").getString(i);
            feeDetails.add(feeDetail);
        }
        balanceTransaction = SrdRef[balanceTransaction](). {
            alloc()~init(balanceObject.getString("id"),
                stringToFloat(balanceObject.getString("amount")),
                stringToInt(balanceObject
                .getString("available_on")),
                stringToInt(balanceObject
                .getString("created")),
                balanceObject.getString("currency"),
                balanceObject.getString("description"),
                stringToFloat(balanceObject.getString("exchange_rate")),
                stringToFloat(balanceObject.getString("fee")),
                feeDetails,
                stringToFloat(balanceObject.getString("net")),
                balanceObject.getString("reporting_category"),
                balanceObject.getString("source"),
                balanceObject.getString("status"),
                balanceObject.getString("type"),)
        }
        return balanceTransaction;
    }
}

