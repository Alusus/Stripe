@merge module Stripe {
    func getCustomers(key: String): Array[SrdRef[Customer]] {
        def customerArray: Array[SrdRef[Customer]];
        def loc: String;
        def prfLoc: Array[String];
        def networkObject: Net.Request(String("https://api.stripe.com/v1/customers"), key, String("Bearer"));
        networkObject.get();
        def customerObject: Json = networkObject.responseBody.buf;
        def i: int = 0;
        def j: int = 0;
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];
        def delinquent: bool;
        for i = 0, i < customerObject.getObject("data").getLength(), i += 1 {
            for j = 0, j < customerObject.getObject("data").getObject(i).getObject("preferred_locales").getLength(), j++ {
                loc = customerObject.getObject("data")
                    .getObject(i).getObject("preferred_locales").getString(j)

                prfLoc.add(loc);
            }
            if customerObject.getObject("data").getObject(i).getString("address") != String("null") {
                address = SrdRef[Address]().{
                    alloc()~init(customerObject.getObject("data")
                        .getObject(i).getObject("address").getString("city")
                        , customerObject.getObject("data")
                        .getObject(i).getObject("address").getString("country")
                        , customerObject.getObject("data")
                        .getObject(i).getObject("address").getString("line1")
                        , customerObject.getObject("data")
                        .getObject(i).getObject("address").getString("line2")
                        , customerObject.getObject("data")
                        .getObject(i).getObject("address").getString("postalCode")
                        , customerObject.getObject("data")
                        .getObject(i).getObject("address").getString("state"))
                };
            } else
                address = SrdRef[Address](). {
                alloc()~init()
            };
            if customerObject.getObject("data").getObject(i).getString("delinquent") == String("true") {
                delinquent = true;
            } else
                delinquent = false;
            customer = SrdRef[Customer]().{
                alloc()~init(customerObject.getObject("data")
                    .getObject(i).getString("id"),
                    address,
                    stringToFloat(customerObject.getObject("data").getObject(i).getString("balance")),
                    stringToInt(customerObject.getObject("data").getObject(i).getString("created")),
                    customerObject.getObject("data")
                    .getObject(i).getString("currency"),
                    customerObject.getObject("data")
                    .getObject(i).getString("default_source"),
                    delinquent,
                    customerObject.getObject("data")
                    .getObject(i).getString("description"),
                    customerObject.getObject("data")
                    .getObject(i).getString("email"),
                    customerObject.getObject("data")
                    .getObject(i).getString("invoice_prefix"),
                    customerObject.getObject("data").getObject(i).getString("name"),
                    stringToInt(customerObject.getObject("data")
                    .getObject(i).getString("nextInvoiceSequence")),
                    customerObject.getObject("data").getObject(i).getString("phone"),
                    prfLoc,
                    customerObject.getObject("data").getObject(i).getString("shipping"),
                    customerObject.getObject("data").getObject(i).getString("tax_exempt"),
                    customerObject.getObject("data").getObject(i).getString("test_clock"),)
            }
            customerArray.add(customer);
            prfLoc.clear();
        }
        return customerArray;
    }

    func getCustomer(key: String, customerId: String): SrdRef[Customer] {
        def loc: String;
        def prfLoc: Array[String];
        def networkObject: Net.Request(String.format("https://api.stripe.com/v1/customers/%s", customerId), key, String("Bearer"));
        networkObject.get();
        def customerObject: Json = networkObject.responseBody.buf;
        def i: int = 0;
        def customer: SrdRef[Customer];
        def address: SrdRef[Address];
        def delinquent: bool;

        for i = 0, i < customerObject.getObject("preferred_locales").getLength(), i++ {
            loc = customerObject.getObject("data")
                .getObject(i).getObject("preferred_locales").getString(i)
                prfLoc.add(loc);
        }
        if customerObject.getString("address") != String("null") {
            address = SrdRef[Address]().{
                alloc()~init(customerObject.getObject("address").getString("city")
                    , customerObject.getObject("address").getString("country")
                    , customerObject.getObject("address").getString("line1")
                    , customerObject.getObject("address").getString("line2")
                    , customerObject.getObject("address").getString("postalCode")
                    , customerObject.getObject("address").getString("state"))
            };
        } else
            address = SrdRef[Address](). {
            alloc()~init()
        };
        if customerObject.getString("delinquent") == String("true") {
            delinquent = true;
        } else
            delinquent = false;
        customer = SrdRef[Customer]().{
            alloc()~init(customerObject.getString("id"),
                address,
                stringToFloat(customerObject.getString("balance")),
                stringToInt(customerObject.getString("created")),
                customerObject.getString("currency"),
                customerObject.getString("default_source"),
                delinquent,
                customerObject.getString("description"),
                customerObject.getString("email"),
                customerObject.getString("invoice_prefix"),
                customerObject.getString("name"),
                stringToInt(customerObject.getString("nextInvoiceSequence")),
                customerObject.getString("phone"),
                prfLoc,
                customerObject.getString("shipping"),
                customerObject.getString("tax_exempt"),
                customerObject.getString("test_clock"),)
        }
        return customer;
    }

    func postCustomer(key: String, parameters: String): String {
        def b: bool = true;
        def customerId: String = "";
        def networkObject: Net.Request(String("https://api.stripe.com/v1/customers"), key, String("Bearer"), String("application/x-www-form-urlencoded"));
        networkObject.post(parameters.buf);
        def customerObject: Json = networkObject.responseBody.buf;
        customerId = customerObject.getString("id");
        return customerId;
    }
}

