import "Srl/Net";
import "Srl/Array";
import "Srl/Map";
import "Srl/String";
import "Srl/System";
import "Srl/Fs";
import "Srl/refs";
import "Srl/Console";
import "Srl/Possible";

import "Apm";
Apm.importFile("Alusus/Json");
Apm.importFile("Alusus/ExtendedNet");

import "Models/Source";
import "Models/Balance";
import "Models/BalanceTransaction";
import "Models/Address";
import "Models/BillingDetails";
import "Models/Customer";
import "Models/CheckoutSession";
import "Models/Subscription";
import "Models/PaymentMethod";
import "Utils/getRecord";
import "Utils/getRecords";
import "Utils/postRecord";
import "Apis/customer";
import "Apis/checkout_session";
import "Apis/balance_transaction";
import "Apis/balance";
import "Apis/billing_portal_session";
import "Apis/subscription";
import "Apis/payment_method";
import "Errors";

@merge module Stripe {
    use Srl;

    class Client {
        def key: String;
        def verbose: Bool = true;

        handler this~init(k: String) {
            this.key = k;
        }

        // Customer APIs

        handler this.getCustomers(): Possible[Array[SrdRef[Customer]]] {
            return Stripe.getCustomers(this.key, -1, String(), this.verbose);
        }
        
        handler this.getCustomers(limit: Int): Possible[Array[SrdRef[Customer]]] {
            return Stripe.getCustomers(this.key, limit, String(), this.verbose);
        }
        
        handler this.getCustomers(limit: Int, startId: String): Possible[Array[SrdRef[Customer]]] {
            return Stripe.getCustomers(this.key, limit, startId, this.verbose);
        }

        handler this.getCustomer(customerId: String): Possible[SrdRef[Customer]] {
            return Stripe.getCustomer(this.key, customerId, this.verbose);
        }

        handler this.createCustomer(parameters: String): Possible[String] {
            return Stripe.createCustomer(this.key, parameters, this.verbose);
        }
        handler this.doesCustomerHaveDefaultPaymentMethod(customerId: String): Bool {
            return Stripe.doesCustomerHaveDefaultPaymentMethod(this.key, customerId, this.verbose);
        }

        handler this.addCustomerDefaultPaymentMethod(customerId: String, paymentMethodId: String): Bool {
            return Stripe.addCustomerDefaultPaymentMethod(this.key, customerId, paymentMethodId, this.verbose);
        }

        // Chekcout Session APIs

        handler this.getCheckoutSessions(): Possible[Array[SrdRef[CheckoutSession]]] {
            return Stripe.getCheckoutSessions(this.key, -1, String(), this.verbose);
        }

        handler this.getCheckoutSessions(limit: Int): Possible[Array[SrdRef[CheckoutSession]]] {
            return Stripe.getCheckoutSessions(this.key, limit, String(), this.verbose);
        }

        handler this.getCheckoutSessions(limit: Int, startId: String): Possible[Array[SrdRef[CheckoutSession]]] {
            return Stripe.getCheckoutSessions(this.key, limit, startId, this.verbose);
        }

        handler this.getCheckoutSession(sessionId: String): Possible[SrdRef[CheckoutSession]] {
            return Stripe.getCheckoutSession(this.key, sessionId, this.verbose);
        }

        handler this.createCheckoutSession(parameters: String): Possible[String] {
            return Stripe.createCheckoutSession(this.key, parameters, this.verbose);
        }

        handler this.createCheckoutSession(items: Map[String, Int], successUrl: CharsPtr): Possible[String] {
            return Stripe.createCheckoutSession(this.key, items, String(), successUrl, this.verbose);
        }

        handler this.createCheckoutSession(
            items: Map[String, Int], customerId: String, successUrl: CharsPtr
        ): Possible[String] {
            return Stripe.createCheckoutSession(this.key, items, customerId, successUrl, this.verbose);
        }

        // Balance APIs

        handler this.getBalance(): Possible[Array[SrdRef[Balance]]] {
            return Stripe.getBalance(this.key, this.verbose);
        }

        // Balance Transaction APIs

        handler this.getBalanceTransactions(): Possible[Array[SrdRef[BalanceTransaction]]] {
            return Stripe.getBalanceTransactions(this.key, -1, String(), this.verbose);
        }

        handler this.getBalanceTransactions(limit: Int): Possible[Array[SrdRef[BalanceTransaction]]] {
            return Stripe.getBalanceTransactions(this.key, limit, String(), this.verbose);
        }

        handler this.getBalanceTransactions(limit: Int, startId: String): Possible[Array[SrdRef[BalanceTransaction]]] {
            return Stripe.getBalanceTransactions(this.key, limit, startId, this.verbose);
        }

        handler this.getBalanceTransaction(id: String): Possible[SrdRef[BalanceTransaction]] {
            return Stripe.getBalanceTransaction(this.key, id, this.verbose);
        }

        // Billing Portal Session APIs

        handler this.createBillingPortalSession(parameters: String): Possible[String] {
            return Stripe.createBillingPortalSession(this.key, parameters, this.verbose);
        }

        handler this.createBillingPortalSession(customerId: String, returnUrl: CharsPtr): Possible[String] {
            return Stripe.createBillingPortalSession(this.key, customerId, returnUrl, this.verbose);
        }

        // Subscription APIs

        handler this.getSubscriptions(): Possible[Array[SrdRef[Subscription]]] {
            return Stripe.getSubscriptions(this.key, this.verbose);
        }
        
        handler this.getSubscriptions(searchString: String): Possible[Array[SrdRef[Subscription]]] {
            return Stripe.getSubscriptions(this.key, searchString, this.verbose);
        }

        handler this.getSubscription(subscriptionId: String): Possible[SrdRef[Subscription]] {
            return Stripe.getSubscription(this.key, subscriptionId, this.verbose);
        }

        handler this.createSubscription(parameters: String): Possible[String] {
            return Stripe.createSubscription(this.key, parameters, this.verbose);
        }

        handler this.createSubscription(items: Map[String, Int], customerId: String): Possible[String] {
            return Stripe.createSubscription(this.key, items, customerId, this.verbose);
        }
        
        handler this.updateSubscription(subscriptionId: String, parameters: String): Possible[String] {
            return Stripe.updateSubscription(this.key, subscriptionId, parameters, this.verbose);
        }
        
        // PaymentMethod APIs

        handler this.getPaymentMethods(customerId: String): Possible[Array[SrdRef[PaymentMethod]]] {
            return Stripe.getPaymentMethods(this.key, customerId, this.verbose);
        }

        handler this.getPaymentMethod(paymentMethodId: String): Possible[SrdRef[PaymentMethod]] {
            return Stripe.getPaymentMethod(this.key, paymentMethodId, this.verbose);
        }
    }
}
